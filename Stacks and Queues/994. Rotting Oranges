class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = -1;
        int fresh = 0;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (grid[i][j] == 2){
                    q.offer(new int[]{i,j});
                }

                else if (grid[i][j] == 1){
                    fresh++;
                }
            }
        }

        if (fresh == 0){
            return 0;
        }

        if (q.isEmpty()){
            return -1;
        }

        int[][] dir = {{1, 0},{-1, 0},{0, -1},{0, 1}};
        while (!q.isEmpty()){
            int size = q.size();
            while (size-- > 0){
                int[] curr = q.poll();
                int x = curr[0];
                int y = curr[1];

                for (int i = 0; i < 4; i++){
                    int nx = x + dir[i][0];
                    int ny = y + dir[i][1];

                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 1){
                        fresh--;
                        grid[nx][ny] = 2;
                        q.offer(new int[]{nx,ny});
                    }
                }
            }
            count++;
        }

        if (fresh == 0){
            return count;
        }

        return -1;
    }
}
