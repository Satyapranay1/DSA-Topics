class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(ans,temp,candidates,target,0);
        return ans;
    }

    public void backtrack(List<List<Integer>> ans,List<Integer> temp,int[] nums,int target,int start){
        if (target == 0){
            ans.add(new ArrayList<>(temp));
            return;
        }

        if (target < 0){
            return;
        }

        for (int i = start; i < nums.length; i++){
            if (i > start && nums[i] == nums[i - 1]) continue;

            temp.add(nums[i]);
            backtrack(ans,temp,nums,target - nums[i],i + 1);
            temp.remove(temp.size() - 1);
        }
    }
}
