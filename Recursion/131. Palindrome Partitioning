class Solution {
    public List<List<String>> partition(String s) {
        List<String> temp = new ArrayList<>();
        List<List<String>> ans = new ArrayList<>();
        backtrack(ans,temp,s,0);
        return ans;
    }

    public void backtrack(List<List<String>> ans,List<String>temp,String curr,int index){
        if (index == curr.length()){
            ans.add(new ArrayList<>(temp));
            return;
        }

        for (int i = index; i < curr.length(); ++i){
            if (isPalindrome(curr,index,i)){
                temp.add(curr.substring(index,i + 1));
                backtrack(ans,temp,curr,i + 1);
                temp.remove(temp.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s,int low,int high){
        while (low <= high){
            if (s.charAt(low) != s.charAt(high)){
                return false;
            }

            low++;
            high--;
        }
        return true;
    }
}
